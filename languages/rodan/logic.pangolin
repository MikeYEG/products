head:
    name: pangolin.
    version: 2020.09.03.
.

variables:
    in Input|string.
    out Output|string.
    Program|string.
    PrintCommand|string.
    FirstAssign|string.
    Assign|string.
    VariablePattern|string.
    ValueInt|string.
    DecimalValue|string.
    DecimalValueAmount|int64.
    StringValue|string.
    CurrentToken|token.
.

labels:
    exitProgram:
        print: "program".
    .
    exitPrintCommand:
        print: "printCommand".
    .
    exitAssignSymbol:
        code: FirstAssign, CurrentToken, @FIRST_ASSIGN.
        code: Assign, CurrentToken, @ASSIGN.
    .
    exitValue:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        code: ValueInt, CurrentToken, @VAL_INT.
    .
    exitDecimalValue:
        code: DecimalValue, DecimalValueAmount, CurrentToken, @VAL_INT.
    .
    exitStringValue:
        code: StringValue, CurrentToken, @EVERYTHING_EXCEPT_QUOTATION.
    .
.

main:
    assign: Output, "output code".
    match: Input.
.

tests:
    assignSymbolWithAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, Assign, myInput.
        assert_if: isNotEqual.
    .
    assignSymbolWithFirstAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.first_assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FirstAssign, myInput.
        assert_if: isNotEqual.
    .
    valueWithString:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.string.pangolin".
        match: myInput, $value.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/value/string.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
    valueWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.variable.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.decimal.pangolin".
        match: myInput, $value.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/value/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/value/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.int.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ValueInt, myInput.
        assert_if: isNotEqual.
    .
    decimalValue:
        decl: myInput|string.
        read: myInput, "./test_files/decimalValue/input.pangolin".
        match: myInput, $decimalValue.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/decimalValue/suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/decimalValue/prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    stringValue:
        decl: myInput|string.
        read: myInput, "./test_files/stringValue/input.pangolin".
        match: myInput, $stringValue.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/stringValue/output.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
.
