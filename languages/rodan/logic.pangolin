head:
    name: pangolin.
    version: 2020.09.03.
.

variables:
    IterableAssigneeVarAmount|int64.
    IterableAssigneeVariableName|string.
    DecimalValue|string.
    DecimalValueAmount|int64.
    CurrentToken|token.
.

labels:
    exitProgram:
        print: "program".
    .
    exitPrintCommand:
        print: "printCommand".
    .
    exitAssignee:
        decl: variableName|bool.
        code: variableName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: isAssignee|bool.
        assign: isAssignee, true.
        push.
    .
    exitListAssigneeIndex:
        decl: isListAssigneeIndex|bool.
        assign: isListAssigneeIndex, true.
        push.
    .
    exitMapAssignee:
        decl: isMapAssignee|bool.
        assign: isMapAssignee, true.
        push.
    .
    exitVariableWithDot:
        decl: isVariableWithDot|bool.
        assign: isVariableWithDot, true.
        push.
    .
    exitImportDefinition:
        decl: isImportDefinition|bool.
        assign: isImportDefinition, true.
        push.
    .
    exitImportDefinitionSingle:
        decl: importName|bool.
        code: importName, CurrentToken, @IMPORT_NAME_PATTERN.
        push.

        decl: isImportDefinitionSingle|bool.
        assign: isImportDefinitionSingle, true.
        push.
    .
    exitRelativePath:
        decl: isRelativePath|bool.
        assign: isRelativePath, true.
        push.
    .
    exitFolderSection:
        decl: fileName|string.
        code: fileName, CurrentToken, @FILE_PATTERN.
        push.

        decl: isFolderSection|bool.
        assign: isFolderSection, true.
        push.
    .
    exitFolderSectionWithSlash:
        decl: fileName|string.
        code: fileName, CurrentToken, @FILE_PATTERN.
        push.

        decl: isFolderSectionWithSlash|bool.
        assign: isFolderSectionWithSlash, true.
        push.
    .
    exitLoadModuleDefinition:
        decl: isLoadModuleDefinition|bool.
        assign: isLoadModuleDefinition, true.
        push.
    .
    exitModuleNames:
        decl: moduleName|string.
        code: moduleName, CurrentToken, @MODULE_NAME_PATTERN.
        push.

        decl: isModuleNames|bool.
        assign: isModuleNames, true.
        push.
    .
    exitModuleNameWithComma:
        decl: moduleName|string.
        code: moduleName, CurrentToken, @MODULE_NAME_PATTERN.
        push.

        decl: isModuleNameWithComma|bool.
        assign: isModuleNameWithComma, true.
        push.
    .
    exitFuncCallAssignment:
        decl: isFuncCallAssignment|bool.
        assign: isFuncCallAssignment, true.
        push.
    .
    exitFuncCall:
        decl: isFuncCall|bool.
        assign: isFuncCall, true.
        push.
    .
    exitFuncCallName:
        decl: funcCallModule|string.
        code: funcCallModule, CurrentToken, @MODULE_NAME_PATTERN.

        decl: funcCallImport|string.
        code: funcCallImport, CurrentToken, @IMPORT_NAME_PATTERN.

        decl: funcCallName|string.
        code: funcCallName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: isFuncCallName|bool.
        assign: isFuncCallName, true.
        push.
    .
    exitFuncCallParameter:
        decl: isFuncCallParameter|bool.
        assign: isFuncCallParameter, true.
        push.
    .
    exitFuncCallAssignee:
        decl: isFuncCallAssignee|bool.
        assign: isFuncCallAssignee, true.
        push.
    .
    exitExceptionAssignee:
        decl: isExceptionAssignee|bool.
        assign: isExceptionAssignee, true.
        push.
    .
    exitRaiseException:
        decl: isRaiseException|bool.
        assign: isRaiseException, true.
        push.
    .
    exitExceptionDefinition:
        decl: isExceptionDefinition|bool.
        assign: isExceptionDefinition, true.
        push.
    .
    exitLoop:
        decl: isLoop|bool.
        assign: isLoop, true.
        push.
    .
    exitRelationalLoop:
        decl: isRelationalLoop|bool.
        assign: isRelationalLoop, true.
        push.
    .
    exitIterableLoop:
        decl: isIterableLoop|bool.
        assign: isIterableLoop, true.
        push.
    .
    exitIterableAssignment:
        decl: isIterableAssignment|bool.
        assign: isIterableAssignment, true.
        push.
    .
    exitIterableAssignee:
        code: IterableAssigneeVariableName, IterableAssigneeVarAmount, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: emptyString|string.

        decl: underscore|string.
        code: underscore, CurrentToken, @UNDERSCORE.

        decl: isIterableAssigneeKeyname|bool.
        not_equal: isIterableAssigneeKeyname, underscore, emptyString.
        del: underscore.

        del: emptyString.
        push.

        decl: isIterableAssignee|bool.
        assign: isIterableAssignee, true.
        push.
    .
    exitIterable:
        decl: iterableVariableName|bool.
        code: iterableVariableName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: isIterable|bool.
        assign: isIterable, true.
        push.
    .
    exitIfDefinition:
        decl: isIfDefinition|bool.
        assign: isIfDefinition, true.
        push.
    .
    exitFuncDefinition:
        decl: isFuncDefinition|bool.
        assign: isFuncDefinition, true.
        push.
    .
    exitFuncSignature:
        decl: isFuncSignature|bool.
        assign: isFuncSignature, true.
        push.
    .
    exitFuncParams:
        decl: isFuncParams|bool.
        assign: isFuncParams, true.
        push.
    .
    exitFuncParamContent:
        decl: isFuncParamContent|bool.
        assign: isFuncParamContent, true.
        push.
    .
    exitFuncParamElement:
        decl: isFuncParamElement|bool.
        assign: isFuncParamElement, true.
        push.
    .
    exitFuncParamEntry:
        decl: funcParamEntryVariableName|string.
        code: funcParamEntryVariableName, CurrentToken, @VAL_VARIABLE_PATTERN.

        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @QUESTION_MARK.

        decl: isFuncParamEntryOptional|bool.
        not_equal: isFuncParamEntryOptional, str, emptyString.
        del: str.

        del: emptyString.
        push.

        decl: isFuncParamEntry|bool.
        assign: isFuncParamEntry, true.
        push.
    .
    exitBracketCode:
        decl: isBracketCode|bool.
        assign: isBracketCode, true.
        push.
    .
    exitCode:
        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @RETURN.

        decl: isCodeReturn|bool.
        not_equal: isCodeReturn, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @CONTINUE.

        decl: isCodeContinue|bool.
        not_equal: isCodeContinue, str, emptyString.
        del: str.

        del: emptyString.
        push.

        decl: isCode|bool.
        assign: isCode, true.
        push.
    .
    exitMapDefinition:
        decl: isMapDefinition|bool.
        assign: isMapDefinition, true.
        push.
    .
    exitMapDefinitionContent:
        decl: isMapDefinitionContent|bool.
        assign: isMapDefinitionContent, true.
        push.
    .
    exitMapDefinitionContentElement:
        decl: isMapDefinitionContentElement|bool.
        assign: isMapDefinitionContentElement, true.
        push.
    .
    exitMapDefinitionContentEntry:
        decl: mapDefinitionContentEntryKeyname|string.
        code: mapDefinitionContentEntryKeyname, CurrentToken, @VAL_VARIABLE_PATTERN.

        decl: isMapDefinitionContentEntry|bool.
        assign: isMapDefinitionContentEntry, true.
        push.
    .
    exitListDefinition:
        decl: isListDefinition|bool.
        assign: isListDefinition, true.
        push.
    .
    exitListDefinitionInternal:
        decl: isListDefInternal|bool.
        assign: isListDefInternal, true.
        push.
    .
    exitListDefinitionContent:
        decl: isListDefCon|bool.
        assign: isListDefCon, true.
        push.
    .
    exitListDefinitionContentElement:
        decl: isListDefConEl|bool.
        assign: isListDefConEl, true.
        push.
    .
    exitComplexType:
        decl: isComplexType|bool.
        assign: isComplexType, true.
        push.
    .
    exitListType:
        decl: isListType|bool.
        assign: isListType, true.

        decl: listTypeDimension|string.
        code: listTypeDimension, CurrentToken, @LIST_DIMENSION.
        push.
    .
    exitPrimitiveType:
        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @BOOL.

        decl: isPrimTypeBool|bool.
        not_equal: isPrimTypeBool, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @BYTE.

        decl: isPrimTypeByte|bool.
        not_equal: isPrimTypeByte, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_HEIGHT.

        decl: isPrimTypeIntHeight|bool.
        not_equal: isPrimTypeIntHeight, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_SIXTEEN.

        decl: isPrimTypeIntSixteen|bool.
        not_equal: isPrimTypeIntSixteen, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_THIRTY_TWO.

        decl: isPrimTypeIntThirtyTwo|bool.
        not_equal: isPrimTypeIntThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_SIXTY_FOUR.

        decl: isPrimTypeIntSixtyFour|bool.
        not_equal: isPrimTypeIntSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_HEIGHT.

        decl: isPrimTypeUintHeight|bool.
        not_equal: isPrimTypeUintHeight, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_SIXTEEN.

        decl: isPrimTypeUintSixteen|bool.
        not_equal: isPrimTypeUintSixteen, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_THIRTY_TWO.

        decl: isPrimTypeUintThirtyTwo|bool.
        not_equal: isPrimTypeUintThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_SIXTY_FOUR.

        decl: isPrimTypeUintSixtyFour|bool.
        not_equal: isPrimTypeUintSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @FLOAT_THIRTY_TWO.

        decl: isPrimTypeFloatThirtyTwo|bool.
        not_equal: isPrimTypeFloatThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @FLOAT_SIXTY_FOUR.

        decl: isPrimTypeFloatSixtyFour|bool.
        not_equal: isPrimTypeFloatSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @STRING.

        decl: isPrimTypeString|bool.
        not_equal: isPrimTypeString, str, emptyString.
        del: str.

        del: emptyString.
        push.
    .
    exitLogicalOperation:
        decl: isLogOp|bool.
        assign: isLogOp, true.
        push.
    .
    exitLogicalOperationOperand:
        decl: isLogOpOperand|bool.
        assign: isLogOpOperand, true.
        push.
    .
    exitRelationalOperation:
        decl: isRelOp|bool.
        assign: isRelOp, true.
        push.
    .
    exitRelationalOperationDecimal:
        decl: isRelOpDec|bool.
        assign: isRelOpDec, true.
        push.
    .
    exitRelationalOperationInt:
        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.
        push.
    .
    exitArythmeticOperation:
        decl: isAryOp|bool.
        assign: isAryOp, true.
        push.
    .
    exitArythmeticOperationDecimal:
        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.
        push.
    .
    exitValueDecimalComplex:
        decl: isValueDecimalComplex|bool.
        assign: isValueDecimalComplex, true.
        push.
    .
    exitArythmeticOperationInt:
        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.
        push.
    .
    exitValueIntComplex:
        decl: isValueIntComplex|bool.
        assign: isValueIntComplex, true.
        push.
    .
    exitArythmeticSymbol:
        decl: emptyString|string.

        decl: addStr|string.
        code: addStr, CurrentToken, @ARY_ADD.

        decl: isArySymbolAdd|bool.
        not_equal: isArySymbolAdd, addStr, emptyString.
        del: addStr.

        decl: divStr|string.
        code: divStr, CurrentToken, @ARY_DIV.

        decl: isArySymbolDiv|bool.
        not_equal: isArySymbolDiv, divStr, emptyString.
        del: divStr.

        decl: modStr|string.
        code: modStr, CurrentToken, @ARY_MOD.

        decl: isArySymbolMod|bool.
        not_equal: isArySymbolMod, modStr, emptyString.
        del: modStr.

        decl: mulStr|string.
        code: mulStr, CurrentToken, @ARY_MUL.

        decl: isArySymbolMul|bool.
        not_equal: isArySymbolMul, mulStr, emptyString.
        del: mulStr.

        decl: subStr|string.
        code: subStr, CurrentToken, @ARY_SUB.

        decl: isArySymbolSub|bool.
        not_equal: isArySymbolSub, subStr, emptyString.
        del: subStr.

        del: emptyString.
    .
    exitRelationalSymbol:
        decl: emptyString|string.

        decl: biggerThanOrEqual|string.
        code: biggerThanOrEqual, CurrentToken, @REL_BIGGER_THAN_OR_EQUAL.

        decl: isRelSymbolBiggerThanOrEqual|bool.
        not_equal: isRelSymbolBiggerThanOrEqual, biggerThanOrEqual, emptyString.
        del: biggerThanOrEqual.

        decl: biggerThan|string.
        code: biggerThan, CurrentToken, @REL_BIGGER_THAN.

        decl: isRelSymbolBiggerThan|bool.
        not_equal: isRelSymbolBiggerThan, biggerThan, emptyString.
        del: biggerThan.

        decl: lessThanOrEqual|string.
        code: lessThanOrEqual, CurrentToken, @REL_LESS_THAN_OR_EQUAL.

        decl: isRelSymbolLessThanOrEqual|bool.
        not_equal: isRelSymbolLessThanOrEqual, lessThanOrEqual, emptyString.
        del: lessThanOrEqual.

        decl: lessThan|string.
        code: lessThan, CurrentToken, @REL_LESS_THAN.

        decl: isRelSymbolLessThan|bool.
        not_equal: isRelSymbolLessThan, lessThan, emptyString.
        del: lessThan.

        decl: equal|string.
        code: equal, CurrentToken, @REL_EQUAL.

        decl: isRelSymbolEqual|bool.
        not_equal: isRelSymbolEqual, equal, emptyString.
        del: equal.

        decl: notEqual|string.
        code: notEqual, CurrentToken, @REL_NOT_EQUAL.

        decl: isRelSymbolNotEqual|bool.
        not_equal: isRelSymbolNotEqual, notEqual, emptyString.
        del: notEqual.

        del: emptyString.
    .
    exitLogicalSymbol:
        decl: emptyString|string.

        decl: isAnd|string.
        code: isAnd, CurrentToken, @LOG_AND.

        decl: isLogicalSymbolAnd|bool.
        not_equal: isLogicalSymbolAnd, isAnd, emptyString.
        del: isAnd.

        decl: isOr|string.
        code: isOr, CurrentToken, @LOG_OR.

        decl: isLogicalSymbolOr|bool.
        not_equal: isLogicalSymbolOr, isOr, emptyString.
        del: isOr.

        del: emptyString.
    .
    exitAssignSymbol:
        decl: emptyString|string.

        decl: firstAssign|string.
        code: firstAssign, CurrentToken, @FIRST_ASSIGN.

        decl: isFirstAssign|bool.
        not_equal: isFirstAssign, firstAssign, emptyString.
        del: firstAssign.

        decl: assign|string.
        code: assign, CurrentToken, @ASSIGN.

        decl: isAssign|bool.
        not_equal: isAssign, assign, emptyString.
        del: assign.

        del: emptyString.
    .
    exitValueString:
        decl: variablePattern|string.
        code: variablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: isValueString|bool.
        assign: isValueString, true.
        push.
    .
    exitValueDecimal:
        decl: variablePattern|string.
        code: variablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.
    .
    exitValueInt:
        decl: variablePattern|string.
        code: variablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.

        decl: valueInt|string.
        code: valueInt, CurrentToken, @VAL_INT.
        push.
    .
    exitValue:
        decl: variablePattern|string.
        code: variablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.

        decl: valueInt|string.
        code: valueInt, CurrentToken, @VAL_INT.
    .
    exitDecimalValue:
        code: DecimalValue, DecimalValueAmount, CurrentToken, @VAL_INT.
    .
    exitStringValue:
        decl: stringValue|string.
        code: stringValue, CurrentToken, @EVERYTHING_EXCEPT_QUOTATION.
    .
.

main:
    assign: Output, "output code".
    match: Input.
.

tests:
    assigneeWithVariableWithMapWithIndexes:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map_with_indexes.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithMapWithIndex:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map_with_index.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithMap:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithIndexes:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable_with_indexes.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variableName, expectedVariableName.
        assert_if: isNotEqual.

        del: isNotEqual.
        del: expectedVariableName.
    .
    assigneeWithVariableWithIndex:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable_with_index.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variableName, expectedVariableName.
        assert_if: isNotEqual.

        del: isNotEqual.
        del: expectedVariableName.
    .
    assigneeWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variableName, expectedVariableName.
        assert_if: isNotEqual.

        del: isNotEqual.
        del: expectedVariableName.
    .
    listAssigneeIndex:
        decl: myInput|string.
        read: myInput, "./test_files/listAssigneeIndex/input.simple.pangolin".
        match: myInput, $listAssigneeIndex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListAssigneeIndex.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    mapAssigneeWithMultiple:
        decl: myInput|string.
        read: myInput, "./test_files/mapAssignee/input.multiple.pangolin".
        match: myInput, $mapAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isMapAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    mapAssigneeWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/mapAssignee/input.single.pangolin".
        match: myInput, $mapAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isMapAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    variableWithDot:
        decl: myInput|string.
        read: myInput, "./test_files/variableWithDot/input.simple.pangolin".
        match: myInput, $variableWithDot.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isVariableWithDot.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionWithMultiple:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinition/input.multiple.pangolin".
        match: myInput, $importDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isImportDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinition/input.single.pangolin".
        match: myInput, $importDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isImportDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionSingle:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinitionSingle/input.single.pangolin".
        match: myInput, $importDefinitionSingle.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isImportDefinitionSingle.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedName|string.
        read: expectedName, "./test_files/importDefinitionSingle/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, importName, expectedName.
        assert_if: isNotEqual.
    .
    relativePath:
        decl: myInput|string.
        read: myInput, "./test_files/relativePath/input.simple.pangolin".
        match: myInput, $relativePath.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelativePath.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    folderSectionWithPath:
        decl: myInput|string.
        read: myInput, "./test_files/folderSection/input.path.pangolin".
        match: myInput, $folderSection.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFolderSection.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSection/expected.path.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, fileName, expectedFileName.
        assert_if: isNotEqual.
    .
    folderSectionWithFile:
        decl: myInput|string.
        read: myInput, "./test_files/folderSection/input.file.pangolin".
        match: myInput, $folderSection.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFolderSection.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSection/expected.file.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, fileName, expectedFileName.
        assert_if: isNotEqual.
    .
    folderSectionWithSlash:
        decl: myInput|string.
        read: myInput, "./test_files/folderSectionWithSlash/input.simple.pangolin".
        match: myInput, $folderSectionWithSlash.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFolderSectionWithSlash.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSectionWithSlash/expected.file.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, fileName, expectedFileName.
        assert_if: isNotEqual.
    .
    loadModuleDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/loadModuleDefinition/input.simple.pangolin".
        match: myInput, $loadModuleDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLoadModuleDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    moduleNamesWithThreeModules:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.three_modules.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.third.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.second.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNamesWithTwoModules:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.two_modules.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.second.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNamesWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.single.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNameWithComma:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNameWithComma/input.simple.pangolin".
        match: myInput, $moduleNameWithComma.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isModuleNameWithComma.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNameWithComma/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, moduleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    funcCallAssignment:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallAssignment/input.simple.pangolin".
        match: myInput, $funcCallAssignment.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallAssignment.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCall:
        decl: myInput|string.
        read: myInput, "./test_files/funcCall/input.simple.pangolin".
        match: myInput, $funcCall.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCall.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCallName:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallName/input.simple.pangolin".
        match: myInput, $funcCallName.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFuncName|string.
        read: expectedFuncName, "./test_files/funcCallName/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, funcCallName, expectedFuncName.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    funcCallNameWithImport:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallName/input.with_import.pangolin".
        match: myInput, $funcCallName.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedImportName|string.
        read: expectedImportName, "./test_files/funcCallName/expected.import.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, funcCallImport, expectedImportName.
        assert_if: isNotEqual.
        del: isNotEqual.


        decl: expectedFuncName|string.
        read: expectedFuncName, "./test_files/funcCallName/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, funcCallName, expectedFuncName.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    funcCallNameWithModule:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallName/input.with_module.pangolin".
        match: myInput, $funcCallName.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/funcCallName/expected.module.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, funcCallModule, expectedModuleName.
        assert_if: isNotEqual.
        del: isNotEqual.


        decl: expectedFuncName|string.
        read: expectedFuncName, "./test_files/funcCallName/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, funcCallName, expectedFuncName.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    funcCallParameterWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallParameter/input.variable.pangolin".
        match: myInput, $funcCallParameter.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallParameter.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCallParameterWithMapDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallParameter/input.map_definition.pangolin".
        match: myInput, $funcCallParameter.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallParameter.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCallAssignee:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallAssignee/input.simple.pangolin".
        match: myInput, $funcCallAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncCallAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionAssigneeWithSkip:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionAssignee/input.skip.pangolin".
        match: myInput, $exceptionAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isExceptionAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionAssigneeWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionAssignee/input.variable.pangolin".
        match: myInput, $exceptionAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isExceptionAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    raiseExceptionWithParent:
        decl: myInput|string.
        read: myInput, "./test_files/raiseException/input.with_parent.pangolin".
        match: myInput, $raiseException.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRaiseException.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    raiseException:
        decl: myInput|string.
        read: myInput, "./test_files/raiseException/input.simple.pangolin".
        match: myInput, $raiseException.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRaiseException.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionDefinition/input.simple.pangolin".
        match: myInput, $exceptionDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isExceptionDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    loopWithRelational:
        decl: myInput|string.
        read: myInput, "./test_files/loop/input.relational.pangolin".
        match: myInput, $loop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    loopWithIterable:
        decl: myInput|string.
        read: myInput, "./test_files/loop/input.iterable.pangolin".
        match: myInput, $loop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    relationalLoop:
        decl: myInput|string.
        read: myInput, "./test_files/relationalLoop/input.simple.pangolin".
        match: myInput, $relationalLoop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelationalLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableLoop:
        decl: myInput|string.
        read: myInput, "./test_files/iterableLoop/input.simple.pangolin".
        match: myInput, $iterableLoop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableAssignment:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignment/input.simple.pangolin".
        match: myInput, $iterableAssignment.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableAssignment.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableAssigneeWithValue:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_value.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, isIterableAssigneeKeyname.
        assert_if: isEqual.
        del: isEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 1.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedValue|string.
        read: expectedValue, "./test_files/iterableAssignee/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedValue.
        assert_if: isNotEqual.
    .
    iterableAssigneeWithKeyname:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_keyname.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableAssigneeKeyname.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 1.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/iterableAssignee/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedKeyname.
        assert_if: isNotEqual.
    .
    iterableAssigneeWithKeynameAndValue:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_keyname_and_value.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, isIterableAssigneeKeyname.
        assert_if: isEqual.
        del: isEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/iterableAssignee/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedVariableName.
        assert_if: isNotEqual.
        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/iterableAssignee/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedKeyname.
        assert_if: isNotEqual.
    .
    iterableWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.variable.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/iterable/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, iterableVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    iterableWithListDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.list_definition.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableWithMapDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.map_definition.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    ifDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/ifDefinition/input.simple.pangolin".
        match: myInput, $ifDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isIfDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/funcDefinition/input.simple.pangolin".
        match: myInput, $funcDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcSignatureWithReturns:
        decl: myInput|string.
        read: myInput, "./test_files/funcSignature/input.with_returns.pangolin".
        match: myInput, $funcSignature.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncSignature.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcSignatureWithoutReturn:
        decl: myInput|string.
        read: myInput, "./test_files/funcSignature/input.without_return.pangolin".
        match: myInput, $funcSignature.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncSignature.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamsIsNotEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/funcParams/input.not_empty.pangolin".
        match: myInput, $funcParams.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParams.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamsIsEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/funcParams/input.empty.pangolin".
        match: myInput, $funcParams.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParams.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamContentWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamContent/input.multiple_entries.pangolin".
        match: myInput, $funcParamContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamContent.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamContentWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamContent/input.single_entry.pangolin".
        match: myInput, $funcParamContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamContent.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamElement:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamElement/input.simple.pangolin".
        match: myInput, $funcParamElement.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamElement.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamEntryWithIsMandatory:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamEntry/input.is_mandatory.pangolin".
        match: myInput, $funcParamEntry.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamEntry.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, isFuncParamEntryOptional.
        assert_if: isEqual.
        del: isEqual.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/funcParamEntry/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, funcParamEntryVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamEntryWithIsOptional:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamEntry/input.is_optional.pangolin".
        match: myInput, $funcParamEntry.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamEntry.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFuncParamEntryOptional.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/funcParamEntry/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, funcParamEntryVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithMultipleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.multiple_entry.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.single_entry.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithoutEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.empty.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    codeWithCode:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.code.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    codeWithReturn:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.return.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isCodeReturn.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    codeWithContinue:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.continue.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isCodeContinue.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    mapDefinitionWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.multiple_entries.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, isMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.single_entry.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, isMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionWithoutEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.empty.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, isMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContent/input.multiple_entries.pangolin".
        match: myInput, $mapDefinitionContent.

        pop.

        decl: isContent|bool.
        assign: isContent, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isContent, isMapDefinitionContent.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContent/input.single_entry.pangolin".
        match: myInput, $mapDefinitionContent.

        pop.

        decl: isContent|bool.
        assign: isContent, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isContent, isMapDefinitionContent.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentElement:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContentElement/input.simple.pangolin".
        match: myInput, $mapDefinitionContentElement.

        pop.

        decl: isElement|bool.
        assign: isElement, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isElement, isMapDefinitionContentElement.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContentEntry/input.simple.pangolin".
        match: myInput, $mapDefinitionContentEntry.

        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/mapDefinitionContentEntry/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedKeyname, mapDefinitionContentEntryKeyname.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: isEntry|bool.
        assign: isEntry, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isEntry, isMapDefinitionContentEntry.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    listDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinition/input.simple.pangolin".
        match: myInput, $listDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefinition.
        assert_if: isNotEqual.
    .
    listDefinitionInternalWithElements:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionInternal/input.with_elements.pangolin".
        match: myInput, $listDefinitionInternal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefInternal.
        assert_if: isNotEqual.
    .
    listDefinitionInternalWithEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionInternal/input.empty.pangolin".
        match: myInput, $listDefinitionInternal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefInternal.
        assert_if: isNotEqual.
    .
    listDefinitionContentWithMultipleElements:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContent/input.with_multiple_elements.pangolin".
        match: myInput, $listDefinitionContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefCon.
        assert_if: isNotEqual.
    .
    listDefinitionContentWithOneElement:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContent/input.with_one_element.pangolin".
        match: myInput, $listDefinitionContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefCon.
        assert_if: isNotEqual.
    .
    listDefinitionContentElementWithSimple:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContentElement/input.simple.pangolin".
        match: myInput, $listDefinitionContentElement.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListDefConEl.
        assert_if: isNotEqual.
    .
    complexTypeWithPrimitiveType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.primitive_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithListType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.list_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithMapType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.map_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithExceptionType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.exception_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isComplexType.
        assert_if: isNotEqual.
    .
    listType:
        decl: myInput|string.
        read: myInput, "./test_files/listType/input.simple.pangolin".
        match: myInput, $listType.

        pop.

        decl: expectedDimension|string.
        read: expectedDimension, "./test_files/listType/expected.dimension.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedDimension, listTypeDimension.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isListType.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    primitiveTypeWithString:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.string.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeString.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeUintSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeUintThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintSixteen:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint16.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeUintSixteen.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintHeight:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint8.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeUintHeight.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeIntSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeIntThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntSixteen:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int16.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeIntSixteen.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntHeight:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int8.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeIntHeight.
        assert_if: isNotEqual.
    .
    primitiveTypeWithFloatSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.float64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeFloatSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithFloatThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.float32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeFloatThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithByte:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.byte.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeByte.
        assert_if: isNotEqual.
    .
    primitiveTypeWithBool:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.bool.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isPrimTypeBool.
        assert_if: isNotEqual.
    .
    logicalOperationWithComplexWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.complex_with_parenthesis.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithComplex:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.complex.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithSimpleWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.simple_with_parenthesis.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithSimple:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.simple.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithLogicalOperationWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.logical_operation_with_parenthesis.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithLogicalOperation:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.logical_operation.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithRelationalOperationWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.relational_operation_with_parenthesis.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithRelationalOperation:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.relational_operation.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogOpOperand.
        assert_if: isNotEqual.
    .
    relationalOperationWithDecWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.decimal_with_parenthesis.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationWithDec:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.decimal.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationnWithIntWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.int_with_parenthesis.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.int.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.variable_then_variable.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.variable_then_dec.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.dec_then_variable.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.dec_then_dec.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDecWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOp.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithArythmeticOperationComplex:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.arythmetic_operation_dec_complex.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueDecimalComplex.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithArythmeticOperation:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.arythmetic_operation_dec.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueDecimalComplex.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.dec.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueDecimalComplex.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithIntWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOp.
        assert_if: isNotEqual.
    .
    valueIntComplexWithArythmeticOperationComplex:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.arythmetic_operation_int_complex.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueIntComplex.
        assert_if: isNotEqual.
    .
    valueIntComplexWithArythmeticOperation:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.arythmetic_operation_int.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueIntComplex.
        assert_if: isNotEqual.
    .
    valueIntComplexWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.int.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueIntComplex.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticSymbolSub:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.sub.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isArySymbolSub.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMul:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mul.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isArySymbolMul.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMod:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mod.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isArySymbolMod.
        assert_if: isNotEqual.
    .
    arythmeticSymbolDiv:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.div.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isArySymbolDiv.
        assert_if: isNotEqual.
    .
    arythmeticSymbolAdd:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.add.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isArySymbolAdd.
        assert_if: isNotEqual.
    .
    relationalSymbolNotEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.not_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolNotEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolLessThan.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolLessThanOrEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolBiggerThan.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isRelSymbolBiggerThanOrEqual.
        assert_if: isNotEqual.
    .
    logicalSymbolOr:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.or.pangolin".
        match: myInput, $logicalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogicalSymbolOr.
        assert_if: isNotEqual.
    .
    logicalSymbolAnd:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.and.pangolin".
        match: myInput, $logicalSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isLogicalSymbolAnd.
        assert_if: isNotEqual.
    .
    assignSymbolWithAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isAssign.
        assert_if: isNotEqual.
    .
    assignSymbolWithFirstAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.first_assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isFirstAssign.
        assert_if: isNotEqual.
    .
    valueStringWithString:
        decl: myInput|string.
        read: myInput, "./test_files/valueString/input.string.pangolin".
        match: myInput, $valueString.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueString.
        assert_if: isNotEqual.
    .
    valueStringWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueString/input.variable.pangolin".
        match: myInput, $valueString.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, isValueString.
        assert_if: isNotEqual.
    .
    valueDecimalWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.variable.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueDecimalWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.decimal.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/valueDecimal/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/valueDecimal/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueIntWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.variable.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueIntWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.int.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, valueInt, myInput.
        assert_if: isNotEqual.
    .
    valueWithString:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.string.pangolin".
        match: myInput, $value.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/value/string.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, stringValue, expectedOutput.
        assert_if: isNotEqual.
    .
    valueWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.variable.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, variablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.decimal.pangolin".
        match: myInput, $value.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/value/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/value/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.int.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, valueInt, myInput.
        assert_if: isNotEqual.
    .
    decimalValue:
        decl: myInput|string.
        read: myInput, "./test_files/decimalValue/input.pangolin".
        match: myInput, $decimalValue.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/decimalValue/suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/decimalValue/prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    stringValue:
        decl: myInput|string.
        read: myInput, "./test_files/stringValue/input.pangolin".
        match: myInput, $stringValue.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/stringValue/output.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, stringValue, expectedOutput.
        assert_if: isNotEqual.
    .
.
