head:
    name: pangolin.
    version: 2020.09.03.
.

variables:
    in Input|string.
    out Output|string.
    Program|string.
    PrintCommand|string.
    IsRelOpInt|bool.
    IsAryOp|bool.
    IsAryOpDec|bool.
    IsAryOpInt|bool.
    IsArySymbolAdd|bool.
    IsArySymbolDiv|bool.
    IsArySymbolMod|bool.
    IsArySymbolMul|bool.
    IsArySymbolSub|bool.
    IsRelSymbolBiggerThanOrEqual|bool.
    IsRelSymbolBiggerThan|bool.
    IsRelSymbolLessThanOrEqual|bool.
    IsRelSymbolLessThan|bool.
    IsRelSymbolEqual|bool.
    IsRelSymbolNotEqual|bool.
    IsLogicalSymbolAnd|bool.
    IsLogicalSymbolOr|bool.
    IsFirstAssign|bool.
    IsAssign|bool.
    VariablePattern|string.
    ValueInt|string.
    DecimalValue|string.
    DecimalValueAmount|int64.
    StringValue|string.
    CurrentToken|token.
.

labels:
    exitProgram:
        print: "program".
    .
    exitPrintCommand:
        print: "printCommand".
    .
    exitRelationalOperationInt:
        assign: IsRelOpInt, true.
        push.
    .
    exitArythmeticOperation:
        assign: IsAryOp, true.
        push.
    .
    exitArythmeticOperationDecimal:
        assign: IsAryOpDec, true.
        push.
    .
    exitArythmeticOperationInt:
        assign: IsAryOpInt, true.
        push.
    .
    exitArythmeticSymbol:
        decl: emptyString|string.

        decl: addStr|string.
        code: addStr, CurrentToken, @ARY_ADD.
        not_equal: IsArySymbolAdd, addStr, emptyString.
        del: addStr.

        decl: divStr|string.
        code: divStr, CurrentToken, @ARY_DIV.
        not_equal: IsArySymbolDiv, divStr, emptyString.
        del: divStr.

        decl: modStr|string.
        code: modStr, CurrentToken, @ARY_MOD.
        not_equal: IsArySymbolMod, modStr, emptyString.
        del: modStr.

        decl: mulStr|string.
        code: mulStr, CurrentToken, @ARY_MUL.
        not_equal: IsArySymbolMul, mulStr, emptyString.
        del: mulStr.

        decl: subStr|string.
        code: subStr, CurrentToken, @ARY_SUB.
        not_equal: IsArySymbolSub, subStr, emptyString.
        del: subStr.

        del: emptyString.
    .
    exitRelationalSymbol:
        decl: emptyString|string.

        decl: biggerThanOrEqual|string.
        code: biggerThanOrEqual, CurrentToken, @REL_BIGGER_THAN_OR_EQUAL.
        not_equal: IsRelSymbolBiggerThanOrEqual, biggerThanOrEqual, emptyString.
        del: biggerThanOrEqual.

        decl: biggerThan|string.
        code: biggerThan, CurrentToken, @REL_BIGGER_THAN.
        not_equal: IsRelSymbolBiggerThan, biggerThan, emptyString.
        del: biggerThan.

        decl: lessThanOrEqual|string.
        code: lessThanOrEqual, CurrentToken, @REL_LESS_THAN_OR_EQUAL.
        not_equal: IsRelSymbolLessThanOrEqual, lessThanOrEqual, emptyString.
        del: lessThanOrEqual.

        decl: lessThan|string.
        code: lessThan, CurrentToken, @REL_LESS_THAN.
        not_equal: IsRelSymbolLessThan, lessThan, emptyString.
        del: lessThan.

        decl: equal|string.
        code: equal, CurrentToken, @REL_EQUAL.
        not_equal: IsRelSymbolEqual, equal, emptyString.
        del: equal.

        decl: notEqual|string.
        code: notEqual, CurrentToken, @REL_NOT_EQUAL.
        not_equal: IsRelSymbolNotEqual, notEqual, emptyString.
        del: notEqual.

        del: emptyString.
    .
    exitLogicalSymbol:
        decl: emptyString|string.

        decl: isAnd|string.
        code: isAnd, CurrentToken, @LOG_AND.
        not_equal: IsLogicalSymbolAnd, isAnd, emptyString.
        del: isAnd.

        decl: isOr|string.
        code: isOr, CurrentToken, @LOG_OR.
        not_equal: IsLogicalSymbolOr, isOr, emptyString.
        del: isOr.

        del: emptyString.
    .
    exitAssignSymbol:
        decl: emptyString|string.

        decl: firstAssign|string.
        code: firstAssign, CurrentToken, @FIRST_ASSIGN.
        not_equal: IsFirstAssign, firstAssign, emptyString.
        del: firstAssign.

        decl: assign|string.
        code: assign, CurrentToken, @ASSIGN.
        not_equal: IsAssign, assign, emptyString.
        del: assign.

        del: emptyString.
    .
    exitValueDecimal:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.
    .
    exitValueInt:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        code: ValueInt, CurrentToken, @VAL_INT.
        push.
    .
    exitValue:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        code: ValueInt, CurrentToken, @VAL_INT.
    .
    exitDecimalValue:
        code: DecimalValue, DecimalValueAmount, CurrentToken, @VAL_INT.
    .
    exitStringValue:
        code: StringValue, CurrentToken, @EVERYTHING_EXCEPT_QUOTATION.
    .
.

main:
    assign: Output, "output code".
    match: Input.
.

tests:
    relationalOperationIntWithVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDecWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithIntWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticSymbolSub:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.sub.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isSub|bool.
        assign: isSub, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isSub, IsArySymbolSub.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMul:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mul.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isMul|bool.
        assign: isMul, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isMul, IsArySymbolMul.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMod:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mod.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isMod|bool.
        assign: isMod, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isMod, IsArySymbolMod.
        assert_if: isNotEqual.
    .
    arythmeticSymbolDiv:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.div.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isDiv|bool.
        assign: isDiv, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDiv, IsArySymbolDiv.
        assert_if: isNotEqual.
    .
    arythmeticSymbolAdd:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.add.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isAdd|bool.
        assign: isAdd, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAdd, IsArySymbolAdd.
        assert_if: isNotEqual.
    .
    relationalSymbolNotEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.not_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isRelNotEqual|bool.
        assign: isRelNotEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelNotEqual, IsRelSymbolNotEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isRelEqual|bool.
        assign: isRelEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelEqual, IsRelSymbolEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isLessThan|bool.
        assign: isLessThan, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLessThan, IsRelSymbolLessThan.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isLessThanOrEqual|bool.
        assign: isLessThanOrEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLessThanOrEqual, IsRelSymbolLessThanOrEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isBiggerThan|bool.
        assign: isBiggerThan, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isBiggerThan, IsRelSymbolBiggerThan.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isBiggerThanOrEqual|bool.
        assign: isBiggerThanOrEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isBiggerThanOrEqual, IsRelSymbolBiggerThanOrEqual.
        assert_if: isNotEqual.
    .
    logicalSymbolOr:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.or.pangolin".
        match: myInput, $logicalSymbol.

        decl: isOr|bool.
        assign: isOr, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isOr, IsLogicalSymbolOr.
        assert_if: isNotEqual.
    .
    logicalSymbolAnd:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.and.pangolin".
        match: myInput, $logicalSymbol.

        decl: isAnd|bool.
        assign: isAnd, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAnd, IsLogicalSymbolAnd.
        assert_if: isNotEqual.
    .
    assignSymbolWithAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isAssign|bool.
        assign: isAssign, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAssign, IsAssign.
        assert_if: isNotEqual.
    .
    assignSymbolWithFirstAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.first_assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isFirstAssign|bool.
        assign: isFirstAssign, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isFirstAssign, IsFirstAssign.
        assert_if: isNotEqual.
    .
    valueDecimalWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.variable.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueDecimalWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.decimal.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/valueDecimal/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/valueDecimal/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueIntWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.variable.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueIntWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.int.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ValueInt, myInput.
        assert_if: isNotEqual.
    .
    valueWithString:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.string.pangolin".
        match: myInput, $value.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/value/string.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
    valueWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.variable.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.decimal.pangolin".
        match: myInput, $value.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/value/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/value/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.int.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ValueInt, myInput.
        assert_if: isNotEqual.
    .
    decimalValue:
        decl: myInput|string.
        read: myInput, "./test_files/decimalValue/input.pangolin".
        match: myInput, $decimalValue.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/decimalValue/suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/decimalValue/prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    stringValue:
        decl: myInput|string.
        read: myInput, "./test_files/stringValue/input.pangolin".
        match: myInput, $stringValue.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/stringValue/output.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
.
