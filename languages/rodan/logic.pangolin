head:
    name: pangolin.
    version: 2020.09.03.
.

variables:
    in Input|string.
    out Output|string.
    Program|string.
    PrintCommand|string.
    IsAssignee|bool.
    VariableName|string.
    IsListAssigneeIndex|bool.
    IsMapAssignee|bool.
    IsVariableWithDot|bool.
    IsImportDefinition|bool.
    IsImportDefinitionSingle|bool.
    ImportName|string.
    IsRelativePath|bool.
    IsFolderSection|bool.
    IsFolderSectionWithSlash|bool.
    FileName|string.
    IsLoadModuleDefinition|bool.
    IsModuleNames|bool.
    IsModuleNameWithComma|bool.
    ModuleName|string.
    IsFuncCallAssignment|bool.
    IsFuncCall|bool.
    IsFuncCallParameter|bool.
    FuncCallParameterVariableName|bool.
    IsFuncCallAssignee|bool.
    IsExceptionAssignee|bool.
    IsRaiseException|bool.
    IsExceptionDefinition|bool.
    IsLoop|bool.
    IsRelationalLoop|bool.
    IsIterableLoop|bool.
    IsIterableAssignment|bool.
    IsIterableAssignee|bool.
    IterableAssigneeVarAmount|int64.
    IterableAssigneeVariableName|string.
    IsIterableAssigneeKeyname|bool.
    IsIterable|bool.
    IterableVariableName|string.
    IsIfDefinition|bool.
    IsFuncDefinition|bool.
    IsFuncSignature|bool.
    IsFuncParams|bool.
    IsFuncParamContent|bool.
    IsFuncParamElement|bool.
    IsFuncParamEntry|bool.
    IsFuncParamEntryOptional|bool.
    FuncParamEntryVariableName|string.
    IsBracketCode|bool.
    IsCode|bool.
    IsCodeReturn|bool.
    IsCodeContinue|bool.
    IsMapDefinition|bool.
    IsMapDefinitionContent|bool.
    IsMapDefinitionContentElement|bool.
    IsMapDefinitionContentEntry|bool.
    MapDefinitionContentEntryKeyname|string.
    IsListDefinition|bool.
    IsListDefInternal|bool.
    IsListDefCon|bool.
    IsListDefConEl|bool.
    IsComplexType|bool.
    IsListType|bool.
    ListTypeDimension|string.
    IsPrimTypeBool|bool.
    IsPrimTypeByte|bool.
    IsPrimTypeFloatThirtyTwo|bool.
    IsPrimTypeFloatSixtyFour|bool.
    IsPrimTypeIntHeight|bool.
    IsPrimTypeIntSixteen|bool.
    IsPrimTypeIntThirtyTwo|bool.
    IsPrimTypeIntSixtyFour|bool.
    IsPrimTypeString|bool.
    IsPrimTypeUintHeight|bool.
    IsPrimTypeUintSixteen|bool.
    IsPrimTypeUintThirtyTwo|bool.
    IsPrimTypeUintSixtyFour|bool.
    IsLogOp|bool.
    IsLogOpOperand|bool.
    IsRelOp|bool.
    IsRelOpDec|bool.
    IsRelOpInt|bool.
    IsAryOp|bool.
    IsAryOpDec|bool.
    IsValueDecimalComplex|bool.
    IsAryOpInt|bool.
    IsValueIntComplex|bool.
    IsArySymbolAdd|bool.
    IsArySymbolDiv|bool.
    IsArySymbolMod|bool.
    IsArySymbolMul|bool.
    IsArySymbolSub|bool.
    IsRelSymbolBiggerThanOrEqual|bool.
    IsRelSymbolBiggerThan|bool.
    IsRelSymbolLessThanOrEqual|bool.
    IsRelSymbolLessThan|bool.
    IsRelSymbolEqual|bool.
    IsRelSymbolNotEqual|bool.
    IsLogicalSymbolAnd|bool.
    IsLogicalSymbolOr|bool.
    IsFirstAssign|bool.
    IsAssign|bool.
    IsValueString|bool.
    VariablePattern|string.
    ValueInt|string.
    DecimalValue|string.
    DecimalValueAmount|int64.
    StringValue|string.
    CurrentToken|token.
.

labels:
    exitProgram:
        print: "program".
    .
    exitPrintCommand:
        print: "printCommand".
    .
    exitAssignee:
        code: VariableName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        assign: IsAssignee, true.
        push.
    .
    exitListAssigneeIndex:
        assign: IsListAssigneeIndex, true.
        push.
    .
    exitMapAssignee:
        assign: IsMapAssignee, true.
        push.
    .
    exitVariableWithDot:
        assign: IsVariableWithDot, true.
        push.
    .
    exitImportDefinition:
        assign: IsImportDefinition, true.
        push.
    .
    exitImportDefinitionSingle:
        code: ImportName, CurrentToken, @IMPORT_NAME_PATTERN.
        push.

        assign: IsImportDefinitionSingle, true.
        push.
    .
    exitRelativePath:
        assign: IsRelativePath, true.
        push.
    .
    exitFolderSection:
        code: FileName, CurrentToken, @FILE_PATTERN.
        push.

        assign: IsFolderSection, true.
        push.
    .
    exitFolderSectionWithSlash:
        code: FileName, CurrentToken, @FILE_PATTERN.
        push.

        assign: IsFolderSectionWithSlash, true.
        push.
    .
    exitLoadModuleDefinition:
        assign: IsLoadModuleDefinition, true.
        push.
    .
    exitModuleNames:
        code: ModuleName, CurrentToken, @MODULE_NAME_PATTERN.
        push.

        assign: IsModuleNames, true.
        push.
    .
    exitModuleNameWithComma:
        code: ModuleName, CurrentToken, @MODULE_NAME_PATTERN.
        push.

        assign: IsModuleNameWithComma, true.
        push.
    .
    exitFuncCallAssignment:
        assign: IsFuncCallAssignment, true.
        push.
    .
    exitFuncCall:
        assign: IsFuncCall, true.
        push.
    .
    exitFuncCallParameter:
        code: FuncCallParameterVariableName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        assign: IsFuncCallParameter, true.
        push.
    .
    exitFuncCallAssignee:
        assign: IsFuncCallAssignee, true.
        push.
    .
    exitExceptionAssignee:
        assign: IsExceptionAssignee, true.
        push.
    .
    exitRaiseException:
        assign: IsRaiseException, true.
        push.
    .
    exitExceptionDefinition:
        assign: IsExceptionDefinition, true.
        push.
    .
    exitLoop:
        assign: IsLoop, true.
        push.
    .
    exitRelationalLoop:
        assign: IsRelationalLoop, true.
        push.
    .
    exitIterableLoop:
        assign: IsIterableLoop, true.
        push.
    .
    exitIterableAssignment:
        assign: IsIterableAssignment, true.
        push.
    .
    exitIterableAssignee:
        code: IterableAssigneeVariableName, IterableAssigneeVarAmount, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        decl: emptyString|string.

        decl: underscore|string.
        code: underscore, CurrentToken, @UNDERSCORE.
        not_equal: IsIterableAssigneeKeyname, underscore, emptyString.
        del: underscore.

        del: emptyString.
        push.

        assign: IsIterableAssignee, true.
        push.
    .
    exitIterable:
        code: IterableVariableName, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        assign: IsIterable, true.
        push.
    .
    exitIfDefinition:
        assign: IsIfDefinition, true.
        push.
    .
    exitFuncDefinition:
        assign: IsFuncDefinition, true.
        push.
    .
    exitFuncSignature:
        assign: IsFuncSignature, true.
        push.
    .
    exitFuncParams:
        assign: IsFuncParams, true.
        push.
    .
    exitFuncParamContent:
        assign: IsFuncParamContent, true.
        push.
    .
    exitFuncParamElement:
        assign: IsFuncParamElement, true.
        push.
    .
    exitFuncParamEntry:
        code: FuncParamEntryVariableName, CurrentToken, @VAL_VARIABLE_PATTERN.

        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @QUESTION_MARK.
        not_equal: IsFuncParamEntryOptional, str, emptyString.
        del: str.

        del: emptyString.
        push.

        assign: IsFuncParamEntry, true.
        push.
    .
    exitBracketCode:
        assign: IsBracketCode, true.
        push.
    .
    exitCode:
        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @RETURN.
        not_equal: IsCodeReturn, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @CONTINUE.
        not_equal: IsCodeContinue, str, emptyString.
        del: str.

        del: emptyString.
        push.

        assign: IsCode, true.
        push.
    .
    exitMapDefinition:
        assign: IsMapDefinition, true.
        push.
    .
    exitMapDefinitionContent:
        assign: IsMapDefinitionContent, true.
        push.
    .
    exitMapDefinitionContentElement:
        assign: IsMapDefinitionContentElement, true.
        push.
    .
    exitMapDefinitionContentEntry:
        code: MapDefinitionContentEntryKeyname, CurrentToken, @VAL_VARIABLE_PATTERN.
        assign: IsMapDefinitionContentEntry, true.
        push.
    .
    exitListDefinition:
        assign: IsListDefinition, true.
        push.
    .
    exitListDefinitionInternal:
        assign: IsListDefInternal, true.
        push.
    .
    exitListDefinitionContent:
        assign: IsListDefCon, true.
        push.
    .
    exitListDefinitionContentElement:
        assign: IsListDefConEl, true.
        push.
    .
    exitComplexType:
        assign: IsComplexType, true.
        push.
    .
    exitListType:
        assign: IsListType, true.
        code: ListTypeDimension, CurrentToken, @LIST_DIMENSION.
        push.
    .
    exitPrimitiveType:
        decl: emptyString|string.

        decl: str|string.
        code: str, CurrentToken, @BOOL.
        not_equal: IsPrimTypeBool, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @BYTE.
        not_equal: IsPrimTypeByte, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_HEIGHT.
        not_equal: IsPrimTypeIntHeight, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_SIXTEEN.
        not_equal: IsPrimTypeIntSixteen, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_THIRTY_TWO.
        not_equal: IsPrimTypeIntThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @INT_SIXTY_FOUR.
        not_equal: IsPrimTypeIntSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_HEIGHT.
        not_equal: IsPrimTypeUintHeight, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_SIXTEEN.
        not_equal: IsPrimTypeUintSixteen, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_THIRTY_TWO.
        not_equal: IsPrimTypeUintThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @UINT_SIXTY_FOUR.
        not_equal: IsPrimTypeUintSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @FLOAT_THIRTY_TWO.
        not_equal: IsPrimTypeFloatThirtyTwo, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @FLOAT_SIXTY_FOUR.
        not_equal: IsPrimTypeFloatSixtyFour, str, emptyString.
        del: str.

        decl: str|string.
        code: str, CurrentToken, @STRING.
        not_equal: IsPrimTypeString, str, emptyString.
        del: str.

        del: emptyString.
        push.
    .
    exitLogicalOperation:
        assign: IsLogOp, true.
        push.
    .
    exitLogicalOperationOperand:
        assign: IsLogOpOperand, true.
        push.
    .
    exitRelationalOperation:
        assign: IsRelOp, true.
        push.
    .
    exitRelationalOperationDecimal:
        assign: IsRelOpDec, true.
        push.
    .
    exitRelationalOperationInt:
        assign: IsRelOpInt, true.
        push.
    .
    exitArythmeticOperation:
        assign: IsAryOp, true.
        push.
    .
    exitArythmeticOperationDecimal:
        assign: IsAryOpDec, true.
        push.
    .
    exitValueDecimalComplex:
        assign: IsValueDecimalComplex, true.
        push.
    .
    exitArythmeticOperationInt:
        assign: IsAryOpInt, true.
        push.
    .
    exitValueIntComplex:
        assign: IsValueIntComplex, true.
        push.
    .
    exitArythmeticSymbol:
        decl: emptyString|string.

        decl: addStr|string.
        code: addStr, CurrentToken, @ARY_ADD.
        not_equal: IsArySymbolAdd, addStr, emptyString.
        del: addStr.

        decl: divStr|string.
        code: divStr, CurrentToken, @ARY_DIV.
        not_equal: IsArySymbolDiv, divStr, emptyString.
        del: divStr.

        decl: modStr|string.
        code: modStr, CurrentToken, @ARY_MOD.
        not_equal: IsArySymbolMod, modStr, emptyString.
        del: modStr.

        decl: mulStr|string.
        code: mulStr, CurrentToken, @ARY_MUL.
        not_equal: IsArySymbolMul, mulStr, emptyString.
        del: mulStr.

        decl: subStr|string.
        code: subStr, CurrentToken, @ARY_SUB.
        not_equal: IsArySymbolSub, subStr, emptyString.
        del: subStr.

        del: emptyString.
    .
    exitRelationalSymbol:
        decl: emptyString|string.

        decl: biggerThanOrEqual|string.
        code: biggerThanOrEqual, CurrentToken, @REL_BIGGER_THAN_OR_EQUAL.
        not_equal: IsRelSymbolBiggerThanOrEqual, biggerThanOrEqual, emptyString.
        del: biggerThanOrEqual.

        decl: biggerThan|string.
        code: biggerThan, CurrentToken, @REL_BIGGER_THAN.
        not_equal: IsRelSymbolBiggerThan, biggerThan, emptyString.
        del: biggerThan.

        decl: lessThanOrEqual|string.
        code: lessThanOrEqual, CurrentToken, @REL_LESS_THAN_OR_EQUAL.
        not_equal: IsRelSymbolLessThanOrEqual, lessThanOrEqual, emptyString.
        del: lessThanOrEqual.

        decl: lessThan|string.
        code: lessThan, CurrentToken, @REL_LESS_THAN.
        not_equal: IsRelSymbolLessThan, lessThan, emptyString.
        del: lessThan.

        decl: equal|string.
        code: equal, CurrentToken, @REL_EQUAL.
        not_equal: IsRelSymbolEqual, equal, emptyString.
        del: equal.

        decl: notEqual|string.
        code: notEqual, CurrentToken, @REL_NOT_EQUAL.
        not_equal: IsRelSymbolNotEqual, notEqual, emptyString.
        del: notEqual.

        del: emptyString.
    .
    exitLogicalSymbol:
        decl: emptyString|string.

        decl: isAnd|string.
        code: isAnd, CurrentToken, @LOG_AND.
        not_equal: IsLogicalSymbolAnd, isAnd, emptyString.
        del: isAnd.

        decl: isOr|string.
        code: isOr, CurrentToken, @LOG_OR.
        not_equal: IsLogicalSymbolOr, isOr, emptyString.
        del: isOr.

        del: emptyString.
    .
    exitAssignSymbol:
        decl: emptyString|string.

        decl: firstAssign|string.
        code: firstAssign, CurrentToken, @FIRST_ASSIGN.
        not_equal: IsFirstAssign, firstAssign, emptyString.
        del: firstAssign.

        decl: assign|string.
        code: assign, CurrentToken, @ASSIGN.
        not_equal: IsAssign, assign, emptyString.
        del: assign.

        del: emptyString.
    .
    exitValueString:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.

        assign: IsValueString, true.
        push.
    .
    exitValueDecimal:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        push.
    .
    exitValueInt:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        code: ValueInt, CurrentToken, @VAL_INT.
        push.
    .
    exitValue:
        code: VariablePattern, CurrentToken, @VAL_VARIABLE_PATTERN.
        code: ValueInt, CurrentToken, @VAL_INT.
    .
    exitDecimalValue:
        code: DecimalValue, DecimalValueAmount, CurrentToken, @VAL_INT.
    .
    exitStringValue:
        code: StringValue, CurrentToken, @EVERYTHING_EXCEPT_QUOTATION.
    .
.

main:
    assign: Output, "output code".
    match: Input.
.

tests:
    assigneeWithVariableWithMapWithIndexes:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map_with_indexes.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithMapWithIndex:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map_with_index.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithMap:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.map.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    assigneeWithVariableWithIndexes:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable_with_indexes.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariableName, expectedVariableName.
        assert_if: isNotEqual.
    .
    assigneeWithVariableWithIndex:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable_with_index.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariableName, expectedVariableName.
        assert_if: isNotEqual.
    .
    assigneeWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/assignee/input.variable.pangolin".
        match: myInput, $assignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/assignee/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariableName, expectedVariableName.
        assert_if: isNotEqual.
    .
    listAssigneeIndex:
        decl: myInput|string.
        read: myInput, "./test_files/listAssigneeIndex/input.simple.pangolin".
        match: myInput, $listAssigneeIndex.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsListAssigneeIndex.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    mapAssigneeWithMultiple:
        decl: myInput|string.
        read: myInput, "./test_files/mapAssignee/input.multiple.pangolin".
        match: myInput, $mapAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsMapAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    mapAssigneeWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/mapAssignee/input.single.pangolin".
        match: myInput, $mapAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsMapAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    variableWithDot:
        decl: myInput|string.
        read: myInput, "./test_files/variableWithDot/input.simple.pangolin".
        match: myInput, $variableWithDot.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsVariableWithDot.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionWithMultiple:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinition/input.multiple.pangolin".
        match: myInput, $importDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsImportDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinition/input.single.pangolin".
        match: myInput, $importDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsImportDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    importDefinitionSingle:
        decl: myInput|string.
        read: myInput, "./test_files/importDefinitionSingle/input.single.pangolin".
        match: myInput, $importDefinitionSingle.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsImportDefinitionSingle.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedName|string.
        read: expectedName, "./test_files/importDefinitionSingle/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ImportName, expectedName.
        assert_if: isNotEqual.
    .
    relativePath:
        decl: myInput|string.
        read: myInput, "./test_files/relativePath/input.simple.pangolin".
        match: myInput, $relativePath.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsRelativePath.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    folderSectionWithPath:
        decl: myInput|string.
        read: myInput, "./test_files/folderSection/input.path.pangolin".
        match: myInput, $folderSection.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFolderSection.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSection/expected.path.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FileName, expectedFileName.
        assert_if: isNotEqual.
    .
    folderSectionWithFile:
        decl: myInput|string.
        read: myInput, "./test_files/folderSection/input.file.pangolin".
        match: myInput, $folderSection.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFolderSection.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSection/expected.file.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FileName, expectedFileName.
        assert_if: isNotEqual.
    .
    folderSectionWithSlash:
        decl: myInput|string.
        read: myInput, "./test_files/folderSectionWithSlash/input.simple.pangolin".
        match: myInput, $folderSectionWithSlash.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFolderSectionWithSlash.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedFileName|string.
        read: expectedFileName, "./test_files/folderSectionWithSlash/expected.file.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FileName, expectedFileName.
        assert_if: isNotEqual.
    .
    loadModuleDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/loadModuleDefinition/input.simple.pangolin".
        match: myInput, $loadModuleDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsLoadModuleDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    moduleNamesWithThreeModules:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.three_modules.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.third.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.second.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNamesWithTwoModules:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.two_modules.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.

        pop.
        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.second.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNamesWithSingle:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNames/input.single.pangolin".
        match: myInput, $moduleNames.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsModuleNames.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNames/expected.first.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    moduleNameWithComma:
        decl: myInput|string.
        read: myInput, "./test_files/moduleNameWithComma/input.simple.pangolin".
        match: myInput, $moduleNameWithComma.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsModuleNameWithComma.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedModuleName|string.
        read: expectedModuleName, "./test_files/moduleNameWithComma/expected.name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ModuleName, expectedModuleName.
        assert_if: isNotEqual.
    .
    funcCallAssignment:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallAssignment/input.simple.pangolin".
        match: myInput, $funcCallAssignment.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncCallAssignment.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCall:
        decl: myInput|string.
        read: myInput, "./test_files/funcCall/input.simple.pangolin".
        match: myInput, $funcCall.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncCall.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcCallParameterWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallParameter/input.variable.pangolin".
        match: myInput, $funcCallParameter.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncCallParameter.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/funcCallParameter/expected.variable.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FuncCallParameterVariableName, expectedVariableName.
        assert_if: isNotEqual.
    .
    funcCallParameterWithMapDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallParameter/input.map_definition.pangolin".
        match: myInput, $funcCallParameter.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncCallParameter.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, FuncCallParameterVariableName, expectedVariableName.
        assert_if: isNotEqual.
    .
    funcCallAssignee:
        decl: myInput|string.
        read: myInput, "./test_files/funcCallAssignee/input.simple.pangolin".
        match: myInput, $funcCallAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncCallAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionAssigneeWithSkip:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionAssignee/input.skip.pangolin".
        match: myInput, $exceptionAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsExceptionAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionAssigneeWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionAssignee/input.variable.pangolin".
        match: myInput, $exceptionAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsExceptionAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    raiseExceptionWithParent:
        decl: myInput|string.
        read: myInput, "./test_files/raiseException/input.with_parent.pangolin".
        match: myInput, $raiseException.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsRaiseException.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    raiseException:
        decl: myInput|string.
        read: myInput, "./test_files/raiseException/input.simple.pangolin".
        match: myInput, $raiseException.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsRaiseException.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    exceptionDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/exceptionDefinition/input.simple.pangolin".
        match: myInput, $exceptionDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsExceptionDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .

    IsExceptionDefinition
    loopWithRelational:
        decl: myInput|string.
        read: myInput, "./test_files/loop/input.relational.pangolin".
        match: myInput, $loop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    loopWithIterable:
        decl: myInput|string.
        read: myInput, "./test_files/loop/input.iterable.pangolin".
        match: myInput, $loop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    relationalLoop:
        decl: myInput|string.
        read: myInput, "./test_files/relationalLoop/input.simple.pangolin".
        match: myInput, $relationalLoop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsRelationalLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableLoop:
        decl: myInput|string.
        read: myInput, "./test_files/iterableLoop/input.simple.pangolin".
        match: myInput, $iterableLoop.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableLoop.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableAssignment:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignment/input.simple.pangolin".
        match: myInput, $iterableAssignment.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableAssignment.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableAssigneeWithValue:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_value.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, IsIterableAssigneeKeyname.
        assert_if: isEqual.
        del: isEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 1.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedValue|string.
        read: expectedValue, "./test_files/iterableAssignee/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedValue.
        assert_if: isNotEqual.
    .
    iterableAssigneeWithKeyname:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_keyname.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableAssigneeKeyname.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 1.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/iterableAssignee/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedKeyname.
        assert_if: isNotEqual.
    .
    iterableAssigneeWithKeynameAndValue:
        decl: myInput|string.
        read: myInput, "./test_files/iterableAssignee/input.with_keyname_and_value.pangolin".
        match: myInput, $iterableAssignee.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterableAssignee.
        assert_if: isNotEqual.
        del: isNotEqual.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, IsIterableAssigneeKeyname.
        assert_if: isEqual.
        del: isEqual.

        del: isTrue.
        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVarAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/iterableAssignee/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedVariableName.
        assert_if: isNotEqual.
        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/iterableAssignee/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, IterableAssigneeVariableName, expectedKeyname.
        assert_if: isNotEqual.
    .
    iterableWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.variable.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/iterable/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, IterableVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    iterableWithListDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.list_definition.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    iterableWithMapDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/iterable/input.map_definition.pangolin".
        match: myInput, $iterable.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIterable.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    ifDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/ifDefinition/input.simple.pangolin".
        match: myInput, $ifDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsIfDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/funcDefinition/input.simple.pangolin".
        match: myInput, $funcDefinition.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcSignatureWithReturns:
        decl: myInput|string.
        read: myInput, "./test_files/funcSignature/input.with_returns.pangolin".
        match: myInput, $funcSignature.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncSignature.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcSignatureWithoutReturn:
        decl: myInput|string.
        read: myInput, "./test_files/funcSignature/input.without_return.pangolin".
        match: myInput, $funcSignature.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncSignature.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamsIsNotEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/funcParams/input.not_empty.pangolin".
        match: myInput, $funcParams.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParams.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamsIsEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/funcParams/input.empty.pangolin".
        match: myInput, $funcParams.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParams.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamContentWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamContent/input.multiple_entries.pangolin".
        match: myInput, $funcParamContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamContent.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamContentWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamContent/input.single_entry.pangolin".
        match: myInput, $funcParamContent.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamContent.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamElement:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamElement/input.simple.pangolin".
        match: myInput, $funcParamElement.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamElement.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamEntryWithIsMandatory:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamEntry/input.is_mandatory.pangolin".
        match: myInput, $funcParamEntry.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamEntry.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isEqual|bool.
        equal: isEqual, isTrue, IsFuncParamEntryOptional.
        assert_if: isEqual.
        del: isEqual.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/funcParamEntry/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, FuncParamEntryVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    funcParamEntryWithIsOptional:
        decl: myInput|string.
        read: myInput, "./test_files/funcParamEntry/input.is_optional.pangolin".
        match: myInput, $funcParamEntry.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamEntry.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsFuncParamEntryOptional.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: expectedVariableName|string.
        read: expectedVariableName, "./test_files/funcParamEntry/expected.variable_name.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedVariableName, FuncParamEntryVariableName.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithMultipleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.multiple_entry.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.single_entry.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    bracketCodeWithoutEntry:
        decl: myInput|string.
        read: myInput, "./test_files/bracketCode/input.empty.pangolin".
        match: myInput, $bracketCode.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsBracketCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.
    .
    codeWithCode:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.code.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    codeWithReturn:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.return.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsCodeReturn.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    codeWithContinue:
        decl: myInput|string.
        read: myInput, "./test_files/code/input.continue.pangolin".
        match: myInput, $code.
        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsCode.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

        pop.

        decl: isTrue|bool.
        assign: isTrue, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isTrue, IsCodeContinue.
        assert_if: isNotEqual.
        del: isNotEqual.

        del: isTrue.

    .
    mapDefinitionWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.multiple_entries.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, IsMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.single_entry.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, IsMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionWithoutEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinition/input.empty.pangolin".
        match: myInput, $mapDefinition.

        pop.

        decl: isDef|bool.
        assign: isDef, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDef, IsMapDefinition.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentWithMultipleEntries:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContent/input.multiple_entries.pangolin".
        match: myInput, $mapDefinitionContent.

        pop.

        decl: isContent|bool.
        assign: isContent, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isContent, IsMapDefinitionContent.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentWithSingleEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContent/input.single_entry.pangolin".
        match: myInput, $mapDefinitionContent.

        pop.

        decl: isContent|bool.
        assign: isContent, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isContent, IsMapDefinitionContent.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentElement:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContentElement/input.simple.pangolin".
        match: myInput, $mapDefinitionContentElement.

        pop.

        decl: isElement|bool.
        assign: isElement, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isElement, IsMapDefinitionContentElement.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    mapDefinitionContentEntry:
        decl: myInput|string.
        read: myInput, "./test_files/mapDefinitionContentEntry/input.simple.pangolin".
        match: myInput, $mapDefinitionContentEntry.

        pop.

        decl: expectedKeyname|string.
        read: expectedKeyname, "./test_files/mapDefinitionContentEntry/expected.keyname.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedKeyname, MapDefinitionContentEntryKeyname.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: isEntry|bool.
        assign: isEntry, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isEntry, IsMapDefinitionContentEntry.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    listDefinition:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinition/input.simple.pangolin".
        match: myInput, $listDefinition.

        pop.

        decl: isListDefinition|bool.
        assign: isListDefinition, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefinition, IsListDefinition.
        assert_if: isNotEqual.
    .
    listDefinitionInternalWithElements:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionInternal/input.with_elements.pangolin".
        match: myInput, $listDefinitionInternal.

        pop.

        decl: isListDefInternal|bool.
        assign: isListDefInternal, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefInternal, IsListDefInternal.
        assert_if: isNotEqual.
    .
    listDefinitionInternalWithEmpty:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionInternal/input.empty.pangolin".
        match: myInput, $listDefinitionInternal.

        pop.

        decl: isListDefInternal|bool.
        assign: isListDefInternal, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefInternal, IsListDefInternal.
        assert_if: isNotEqual.
    .
    listDefinitionContentWithMultipleElements:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContent/input.with_multiple_elements.pangolin".
        match: myInput, $listDefinitionContent.

        pop.

        decl: isListDefCon|bool.
        assign: isListDefCon, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefCon, IsListDefCon.
        assert_if: isNotEqual.
    .
    listDefinitionContentWithOneElement:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContent/input.with_one_element.pangolin".
        match: myInput, $listDefinitionContent.

        pop.

        decl: isListDefCon|bool.
        assign: isListDefCon, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefCon, IsListDefCon.
        assert_if: isNotEqual.
    .
    listDefinitionContentElementWithSimple:
        decl: myInput|string.
        read: myInput, "./test_files/listDefinitionContentElement/input.simple.pangolin".
        match: myInput, $listDefinitionContentElement.

        pop.

        decl: isListDefConEl|bool.
        assign: isListDefConEl, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListDefConEl, IsListDefConEl.
        assert_if: isNotEqual.
    .
    complexTypeWithPrimitiveType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.primitive_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isComplexType|bool.
        assign: isComplexType, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexType, IsComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithListType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.list_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isComplexType|bool.
        assign: isComplexType, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexType, IsComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithMapType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.map_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isComplexType|bool.
        assign: isComplexType, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexType, IsComplexType.
        assert_if: isNotEqual.
    .
    complexTypeWithExceptionType:
        decl: myInput|string.
        read: myInput, "./test_files/complexType/input.exception_type.pangolin".
        match: myInput, $complexType.

        pop.

        decl: isComplexType|bool.
        assign: isComplexType, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexType, IsComplexType.
        assert_if: isNotEqual.
    .
    listType:
        decl: myInput|string.
        read: myInput, "./test_files/listType/input.simple.pangolin".
        match: myInput, $listType.

        pop.

        decl: expectedDimension|string.
        read: expectedDimension, "./test_files/listType/expected.dimension.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, expectedDimension, ListTypeDimension.
        assert_if: isNotEqual.
        del: isNotEqual.

        decl: isListType|bool.
        assign: isListType, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isListType, IsListType.
        assert_if: isNotEqual.
        del: isNotEqual.
    .
    primitiveTypeWithString:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.string.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeString|bool.
        assign: isPrimTypeString, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeString, IsPrimTypeString.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeUint|bool.
        assign: isPrimTypeUint, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeUint, IsPrimTypeUintSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeUint|bool.
        assign: isPrimTypeUint, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeUint, IsPrimTypeUintThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintSixteen:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint16.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeUint|bool.
        assign: isPrimTypeUint, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeUint, IsPrimTypeUintSixteen.
        assert_if: isNotEqual.
    .
    primitiveTypeWithUintHeight:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.uint8.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeUint|bool.
        assign: isPrimTypeUint, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeUint, IsPrimTypeUintHeight.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeInt|bool.
        assign: isPrimTypeInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeInt, IsPrimTypeIntSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeInt|bool.
        assign: isPrimTypeInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeInt, IsPrimTypeIntThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntSixteen:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int16.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeInt|bool.
        assign: isPrimTypeInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeInt, IsPrimTypeIntSixteen.
        assert_if: isNotEqual.
    .
    primitiveTypeWithIntHeight:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.int8.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeInt|bool.
        assign: isPrimTypeInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeInt, IsPrimTypeIntHeight.
        assert_if: isNotEqual.
    .
    primitiveTypeWithFloatSixtyFour:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.float64.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeFloat|bool.
        assign: isPrimTypeFloat, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeFloat, IsPrimTypeFloatSixtyFour.
        assert_if: isNotEqual.
    .
    primitiveTypeWithFloatThirtyTwo:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.float32.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeFloat|bool.
        assign: isPrimTypeFloat, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeFloat, IsPrimTypeFloatThirtyTwo.
        assert_if: isNotEqual.
    .
    primitiveTypeWithByte:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.byte.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeByte|bool.
        assign: isPrimTypeByte, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeByte, IsPrimTypeByte.
        assert_if: isNotEqual.
    .
    primitiveTypeWithBool:
        decl: myInput|string.
        read: myInput, "./test_files/primitiveType/input.bool.pangolin".
        match: myInput, $primitiveType.

        pop.

        decl: isPrimTypeBool|bool.
        assign: isPrimTypeBool, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isPrimTypeBool, IsPrimTypeBool.
        assert_if: isNotEqual.
    .
    logicalOperationWithComplexWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.complex_with_parenthesis.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isLogOp|bool.
        assign: isLogOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOp, IsLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithComplex:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.complex.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isLogOp|bool.
        assign: isLogOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOp, IsLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithSimpleWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.simple_with_parenthesis.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isLogOp|bool.
        assign: isLogOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOp, IsLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationWithSimple:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperation/input.simple.pangolin".
        match: myInput, $logicalOperation.

        pop.

        decl: isLogOp|bool.
        assign: isLogOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOp, IsLogOp.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithLogicalOperationWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.logical_operation_with_parenthesis.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isLogOpOperand|bool.
        assign: isLogOpOperand, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOpOperand, IsLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithLogicalOperation:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.logical_operation.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isLogOpOperand|bool.
        assign: isLogOpOperand, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOpOperand, IsLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithRelationalOperationWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.relational_operation_with_parenthesis.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isLogOpOperand|bool.
        assign: isLogOpOperand, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOpOperand, IsLogOpOperand.
        assert_if: isNotEqual.
    .
    logicalOperationOperandWithRelationalOperation:
        decl: myInput|string.
        read: myInput, "./test_files/logicalOperationOperand/input.relational_operation.pangolin".
        match: myInput, $logicalOperationOperand.

        pop.

        decl: isLogOpOperand|bool.
        assign: isLogOpOperand, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLogOpOperand, IsLogOpOperand.
        assert_if: isNotEqual.
    .
    relationalOperationWithDecWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.decimal_with_parenthesis.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isRelOp|bool.
        assign: isRelOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOp, IsRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationWithDec:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.decimal.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isRelOp|bool.
        assign: isRelOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOp, IsRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationnWithIntWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.int_with_parenthesis.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isRelOp|bool.
        assign: isRelOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOp, IsRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperation/input.int.pangolin".
        match: myInput, $relationalOperation.

        pop.

        decl: isRelOp|bool.
        assign: isRelOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOp, IsRelOp.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.variable_then_variable.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isRelOpDec|bool.
        assign: isRelOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpDec, IsRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.variable_then_dec.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isRelOpDec|bool.
        assign: isRelOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpDec, IsRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.dec_then_variable.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isRelOpDec|bool.
        assign: isRelOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpDec, IsRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationDecimalWithIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationDecimal/input.dec_then_dec.pangolin".
        match: myInput, $relationalOperationDecimal.

        pop.

        decl: isRelOpDec|bool.
        assign: isRelOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpDec, IsRelOpDec.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.variable_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_variable.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    relationalOperationIntWithIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/relationalOperationInt/input.int_then_int.pangolin".
        match: myInput, $relationalOperationInt.

        pop.

        decl: isRelOpInt|bool.
        assign: isRelOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelOpInt, IsRelOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDecWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.decimal.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithArythmeticOperationComplex:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.arythmetic_operation_dec_complex.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isComplexDec|bool.
        assign: isComplexDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexDec, IsValueDecimalComplex.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithArythmeticOperation:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.arythmetic_operation_dec.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isComplexDec|bool.
        assign: isComplexDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexDec, IsValueDecimalComplex.
        assert_if: isNotEqual.
    .
    valueDecimalComplexWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimalComplex/input.dec.pangolin".
        match: myInput, $valueDecimalComplex.

        pop.

        decl: isComplexDec|bool.
        assign: isComplexDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexDec, IsValueDecimalComplex.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithIntWithParenthesis:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int_with_parenthesis.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    arythmeticOperationWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperation/input.int.pangolin".
        match: myInput, $arythmeticOperation.

        pop.

        decl: isAryOp|bool.
        assign: isAryOp, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOp, IsAryOp.
        assert_if: isNotEqual.
    .
    valueIntComplexWithArythmeticOperationComplex:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.arythmetic_operation_int_complex.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isComplexInt|bool.
        assign: isComplexInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexInt, IsValueIntComplex.
        assert_if: isNotEqual.
    .
    valueIntComplexWithArythmeticOperation:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.arythmetic_operation_int.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isComplexInt|bool.
        assign: isComplexInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexInt, IsValueIntComplex.
        assert_if: isNotEqual.
    .
    valueIntComplexWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueIntComplex/input.int.pangolin".
        match: myInput, $valueIntComplex.

        pop.

        decl: isComplexInt|bool.
        assign: isComplexInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isComplexInt, IsValueIntComplex.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecVariableThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.variable_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_variable.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationDecDecThenDec:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationDecimal/input.dec_then_dec.pangolin".
        match: myInput, $arythmeticOperationDecimal.

        pop.

        decl: isAryOpDec|bool.
        assign: isAryOpDec, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpDec, IsAryOpDec.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntVariableThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.variable_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenVariable:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_variable.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticOperationIntIntThenInt:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticOperationInt/input.int_then_int.pangolin".
        match: myInput, $arythmeticOperationInt.

        pop.

        decl: isAryOpInt|bool.
        assign: isAryOpInt, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAryOpInt, IsAryOpInt.
        assert_if: isNotEqual.
    .
    arythmeticSymbolSub:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.sub.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isSub|bool.
        assign: isSub, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isSub, IsArySymbolSub.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMul:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mul.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isMul|bool.
        assign: isMul, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isMul, IsArySymbolMul.
        assert_if: isNotEqual.
    .
    arythmeticSymbolMod:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.mod.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isMod|bool.
        assign: isMod, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isMod, IsArySymbolMod.
        assert_if: isNotEqual.
    .
    arythmeticSymbolDiv:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.div.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isDiv|bool.
        assign: isDiv, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isDiv, IsArySymbolDiv.
        assert_if: isNotEqual.
    .
    arythmeticSymbolAdd:
        decl: myInput|string.
        read: myInput, "./test_files/arythmeticSymbol/input.add.pangolin".
        match: myInput, $arythmeticSymbol.

        decl: isAdd|bool.
        assign: isAdd, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAdd, IsArySymbolAdd.
        assert_if: isNotEqual.
    .
    relationalSymbolNotEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.not_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isRelNotEqual|bool.
        assign: isRelNotEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelNotEqual, IsRelSymbolNotEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isRelEqual|bool.
        assign: isRelEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isRelEqual, IsRelSymbolEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isLessThan|bool.
        assign: isLessThan, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLessThan, IsRelSymbolLessThan.
        assert_if: isNotEqual.
    .
    relationalSymbolLessThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.less_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isLessThanOrEqual|bool.
        assign: isLessThanOrEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isLessThanOrEqual, IsRelSymbolLessThanOrEqual.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThan:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than.pangolin".
        match: myInput, $relationalSymbol.

        decl: isBiggerThan|bool.
        assign: isBiggerThan, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isBiggerThan, IsRelSymbolBiggerThan.
        assert_if: isNotEqual.
    .
    relationalSymbolBiggerThanOrEqual:
        decl: myInput|string.
        read: myInput, "./test_files/relationalSymbol/input.bigger_than_or_equal.pangolin".
        match: myInput, $relationalSymbol.

        decl: isBiggerThanOrEqual|bool.
        assign: isBiggerThanOrEqual, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isBiggerThanOrEqual, IsRelSymbolBiggerThanOrEqual.
        assert_if: isNotEqual.
    .
    logicalSymbolOr:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.or.pangolin".
        match: myInput, $logicalSymbol.

        decl: isOr|bool.
        assign: isOr, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isOr, IsLogicalSymbolOr.
        assert_if: isNotEqual.
    .
    logicalSymbolAnd:
        decl: myInput|string.
        read: myInput, "./test_files/logicalSymbol/input.and.pangolin".
        match: myInput, $logicalSymbol.

        decl: isAnd|bool.
        assign: isAnd, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAnd, IsLogicalSymbolAnd.
        assert_if: isNotEqual.
    .
    assignSymbolWithAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isAssign|bool.
        assign: isAssign, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isAssign, IsAssign.
        assert_if: isNotEqual.
    .
    assignSymbolWithFirstAssign:
        decl: myInput|string.
        read: myInput, "./test_files/assignSymbol/input.first_assign.pangolin".
        match: myInput, $assignSymbol.

        decl: isFirstAssign|bool.
        assign: isFirstAssign, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isFirstAssign, IsFirstAssign.
        assert_if: isNotEqual.
    .
    valueStringWithString:
        decl: myInput|string.
        read: myInput, "./test_files/valueString/input.string.pangolin".
        match: myInput, $valueString.

        pop.

        decl: isValueString|bool.
        assign: isValueString, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isValueString, IsValueString.
        assert_if: isNotEqual.
    .
    valueStringWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueString/input.variable.pangolin".
        match: myInput, $valueString.

        pop.

        decl: isValueString|bool.
        assign: isValueString, true.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, isValueString, IsValueString.
        assert_if: isNotEqual.
    .
    valueDecimalWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.variable.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueDecimalWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/valueDecimal/input.decimal.pangolin".
        match: myInput, $valueDecimal.

        pop.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/valueDecimal/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/valueDecimal/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueIntWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.variable.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueIntWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/valueInt/input.int.pangolin".
        match: myInput, $valueInt.

        pop.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ValueInt, myInput.
        assert_if: isNotEqual.
    .
    valueWithString:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.string.pangolin".
        match: myInput, $value.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/value/string.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
    valueWithVariable:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.variable.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, VariablePattern, myInput.
        assert_if: isNotEqual.
    .
    valueWithDecimal:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.decimal.pangolin".
        match: myInput, $value.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/value/decimal.suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/value/decimal.prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    valueWithInt:
        decl: myInput|string.
        read: myInput, "./test_files/value/input.int.pangolin".
        match: myInput, $value.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, ValueInt, myInput.
        assert_if: isNotEqual.
    .
    decimalValue:
        decl: myInput|string.
        read: myInput, "./test_files/decimalValue/input.pangolin".
        match: myInput, $decimalValue.

        decl: expectedAmount|int64.
        assign: expectedAmount, 2.

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValueAmount, expectedAmount.
        assert_if: isNotEqual.
        pop.

        decl: expectedSuffix|string.
        read: expectedSuffix, "./test_files/decimalValue/suffix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedSuffix.
        assert_if: isNotEqual.
        pop.

        decl: expectedPrefix|string.
        read: expectedPrefix, "./test_files/decimalValue/prefix.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, DecimalValue, expectedPrefix.
        assert_if: isNotEqual.
    .
    stringValue:
        decl: myInput|string.
        read: myInput, "./test_files/stringValue/input.pangolin".
        match: myInput, $stringValue.

        decl: expectedOutput|string.
        read: expectedOutput, "./test_files/stringValue/output.expected.pangolin".

        decl: isNotEqual|bool.
        not_equal: isNotEqual, StringValue, expectedOutput.
        assert_if: isNotEqual.
    .
.
